#jinja2: trim_blocks: True, lstrip_blocks: True
{#######################################

#Purpose:
Clos Fabric usecase configuration for SONiC devices

#######################################}
{% set loopback_ip = [] %}
{% if interfaces is defined and interfaces %}
    {% for intf, value in interfaces.items() %}
      {% for item in value %}
         {% if 'channel_grp' in item and item['channel_grp'] %}
interface PortChannel 1
 no shutdown
         {% endif %}
      {% endfor %}
    {% endfor %}
    {% for intf, value in interfaces.items() %}
interface {{intf}}
      {% for item in value %}
         {% if 'ip' in item and  item['ip'] %}
 ip address {{ item['ip'] }}
         {% if 'Loopback' in intf %}
         {% set x=loopback_ip.append(item['ip'].split('/')[0]) %}
         {% endif %}
         {% endif %}
         {% if 'channel_grp' in item and item['channel_grp'] %}
 channel-group {{ item['channel_grp'] }}
         {% endif %}
      {% endfor %}
      {% if 'Loopback' not in intf %}
 no shutdown
      {% endif %}
    {% endfor %}
{% endif %}    
{% if mclag is defined and mclag %}
mclag domain 1
 peer-link Portchannel 1
    {% for intf, value in mclag.items() %}
      {% for item in value %}
         {% if 'source_ip' in item and item['source_ip'] %}
 source-ip {{ item['source_ip'] }}
         {% endif %}
         {% if 'peer_ip' in item and item['peer_ip'] %}
 peer-ip {{ item['peer_ip'] }}
         {% endif %}
      {% endfor %}
    {% endfor %}
 session-timeout 15
{% endif %}
{% if bgp is defined and bgp %}
  {% if (bgp.asn is defined and bgp.asn) %}
router bgp {{ bgp.asn }}
  {% endif %}
  {% if loopback_ip %}
 router-id {{ loopback_ip[0] }}
  {% endif %}
 log-neighbor-changes
  {% for key,val in bgp.items() %}
  {% if key.endswith('_ip') %}
    {% if key.endswith('_ibgp_ip') and (bgp.asn is defined and bgp.asn) %}
 neighbor {{ val }}
  remote-as {{ bgp.asn }}
    {% elif (bgp.remote_asn is defined and bgp.remote_asn) %}
      {% if '3' in key or '4' in key %}
 neighbor {{ val }} 
  remote-as {{ bgp.remote_asn[1] }}
        {% else %}
 neighbor {{ val }}
  remote-as {{ bgp.remote_asn[0] }}
        {% endif %}
    {% endif %}
    {% if key.endswith('_source_ip') and loopback_ip %}
  update-source {{ loopback_ip[0] }}
  ebgp-multihop 2
    {% elif not key.endswith('_ibgp_ip') %}
  ebgp-multihop 2
  advertisement-interval 1
  timers 10 30
    {% endif %}
  {% endif %}
  {% endfor %}
 exit
 address-family ipv4 unicast
  redistribute connected
  redistribute static
 exit
  {% if inventory_hostname in ['spine1'] %}
 address-family l2vpn evpn
  advertise ipv4 unicast
 exit
  {% endif %}
{% endif %}
